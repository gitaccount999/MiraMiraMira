precision highp float;
uniform vec4 vColor;
uniform float uCropBounds[4];
uniform float uCX;
uniform float uCY;

uniform float cropQuad[8];

bool pnpoly() {
    float testx = gl_FragCoord.x;
    float testy = gl_FragCoord.y;
    bool c = false;
    float yi, xi, yj, xj;

    yi = cropQuad[1];
    xi = cropQuad[0];
    yj = cropQuad[7];
    xj = cropQuad[6];

    if ( ((yi>testy) != (yj>testy)) && (testx < (xj-xi) * (testy-yi) / (yj-yi) + xi) )
        c = !c;

    yi = cropQuad[3];
    xi = cropQuad[2];
    yj = cropQuad[1];
    xj = cropQuad[0];

    if ( ((yi>testy) != (yj>testy)) && (testx < (xj-xi) * (testy-yi) / (yj-yi) + xi) )
        c = !c;

    yi = cropQuad[5];
    xi = cropQuad[4];
    yj = cropQuad[3];
    xj = cropQuad[2];

    if ( ((yi>testy) != (yj>testy)) && (testx < (xj-xi) * (testy-yi) / (yj-yi) + xi) )
        c = !c;

    yi = cropQuad[7];
    xi = cropQuad[6];
    yj = cropQuad[5];
    xj = cropQuad[4];

    if ( ((yi>testy) != (yj>testy)) && (testx < (xj-xi) * (testy-yi) / (yj-yi) + xi) )
        c = !c;

    return c;
}

void main() {
    if(gl_FragCoord.x < uCropBounds[0]
            || gl_FragCoord.x > uCropBounds[1]
            || gl_FragCoord.y < uCropBounds[2]
            || gl_FragCoord.y > uCropBounds[3] ) {
        discard;
    }
    if(!pnpoly())
        discard;

    float d = distance(gl_FragCoord.xy, vec2(uCX, uCY));
    float md = mod(d, 20.0);
    if(md < 10.0)
        discard;
    gl_FragColor = vColor;
}

