precision highp float;

uniform sampler2D uTexture;
varying vec2 vTexPosition;

uniform vec2 resolution;
uniform float uVign;
uniform float uLens;

uniform int uAlgorithm;

uniform float uDebug1;
uniform float uDebug2;

#define PI 3.14159
#define PI2 (PI * 0.5)

void vignetteCorrection(inout vec4 inp, vec2 coord);
vec2 lensCorrection(void);
vec2 lensCorrectionLand(void);

float applyCorrection(float val, float r);
float applyCorrectionBack(float val, float r);

vec3 rgb2hsv(vec3 c);
vec3 hsv2rgb(vec3 c);

void main(void) {
    vec2 coord = lensCorrection();
    vec4 texColor = texture2D(uTexture, coord);
    vignetteCorrection(texColor, coord);

    gl_FragColor = texColor;
}

const float e1 = 0.6;
const float e2 = 1.2;

void vignetteCorrection(inout vec4 inp, vec2 coord) {
    if(abs(uVign - 0.5) < 0.01)
        return;
    vec2 d = coord - vec2(0.5);
    float r = length(d);

    if(uVign > 0.5) { // lighten
        float val = uVign - 0.5;
        float v = smoothstep(e1 - 0.5, e2 - 0.5, r);
        vec3 hsv = rgb2hsv(inp.rgb);
        //hsv.z = clamp(hsv.z + val * v * 0.8, 0.0, 1.0);
        float z = val * v;
        inp.r = clamp(sqrt(inp.r * (z + inp.r)), 0.0, 1.0);
        inp.g = clamp(sqrt(inp.g * (z + inp.g)), 0.0, 1.0);
        inp.b = clamp(sqrt(inp.b * (z + inp.b)), 0.0, 1.0);

        //inp.rgb = hsv2rgb(hsv);
    } else if(uVign < 0.5) { // darken
        float val = 0.5 - uVign;
        float v = smoothstep(e1 - 0.5, e2 - 0.5, r);
        vec3 hsv = rgb2hsv(inp.rgb);
        //hsv.z = clamp(hsv.z - val * v, 0.0, 1.0);
        //inp.rgb = hsv2rgb(hsv);
        float z = val * v;
        inp.r = clamp(sqrt(inp.r * (inp.r - z)), 0.0, 1.0);
        inp.g = clamp(sqrt(inp.g * (inp.g - z)), 0.0, 1.0);
        inp.b = clamp(sqrt(inp.b * (inp.b - z)), 0.0, 1.0);
    }
}

vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec2 lensCorrection() { // equisolid
    if(resolution.x > resolution.y) {
        return lensCorrectionLand();
    }
    vec2 p = gl_FragCoord.xy / resolution.x;
    float prop = resolution.x / resolution.y;
    vec2 m = vec2(0.5, 0.5 / prop);
    vec2 d = p - m;
    float r = length(d);

    vec2 uv = p;
    if(uLens > 0.5) {
        float val = uLens - 0.5;
        float dd = applyCorrection(val, r);
        dd = abs(dd);
        //float rmax = length(0.5);
        //float scale = applyCorrection(val, rmax);
        //uv = m + normalize(d) * dd / scale * rmax;
        uv = m + normalize(d) * dd;
    } else if(uLens < 0.5) {
        float val = 0.5 - uLens;
        float dd = applyCorrectionBack(val, r);
        dd = abs(dd);
        float rmax = length(m);
        float scale = applyCorrectionBack(val, rmax);
        uv = m + normalize(d) * dd / scale * rmax;
    }

    uv.y *= prop;
    return uv;
}

vec2 lensCorrectionLand() { // equisolid
    vec2 p = gl_FragCoord.xy / resolution.y;
    float prop = resolution.y / resolution.x;
    vec2 m = vec2(0.5 / prop, 0.5);
    vec2 d = p - m;
    float r = length(d);

    vec2 uv = p;
    if(uLens > 0.5) {
        float val = uLens - 0.5;
        float dd = applyCorrection(val, r);
        dd = abs(dd);
        //float rmax = length(0.5);
        //float scale = applyCorrection(val, rmax);
        //uv = m + normalize(d) * dd / scale * rmax;
        uv = m + normalize(d) * dd;
    } else if(uLens < 0.5) {
        float val = 0.5 - uLens;
        float dd = applyCorrectionBack(val, r);
        dd = abs(dd);
        float rmax = length(m);
        float scale = applyCorrectionBack(val, rmax);
        uv = m + normalize(d) * dd / scale * rmax;
    }

    uv.x *= prop;
    return uv;
}

// 0 - mobile
// 1 - wide
// 2 - fisheye
// 3 - gopro

float applyCorrection(float val, float r) {
    int a = uAlgorithm;
    float focal = -log(val * 1.5);
    if(a == 0) { // equisolid
        focal = -log(val * (1.0 - 0.246)) * 0.365; // 0.246; 0.365
        return sin(r / focal) * focal;
        //return 2.0 * focal * sin(0.5 * atan(r / focal));
    } else if(a == 1) { // equidistant
        focal = -log(val * 1.35); // 0.9 * 1.5
        return focal * atan(r / focal);
    } else if(a == 2) { // stereographic
        float focal = -log(val * 1.62);
        return 2.0 * focal * tan(0.5 * atan(r / focal));
    } else if(a == 3) { // orthographic
        //return focal * sin(atan(r / focal));
        return sin(atan(r / focal)) / sin(atan(0.5 / focal)) * 0.5;
    }

    return 0.0;
}

float applyCorrectionBack(float val, float r) {
    int a = uAlgorithm;
    if(uAlgorithm == 3)
        val *= 0.85;
    float focal = -log(val);

    if(a == 0) {
        //return pow(r, (1.0 + val * 2.0));
        return focal * tan(2.0 * asin(r / focal * 0.5));
    } else if(a == 1) {
        return focal * tan(r / focal);
    } else if(a == 2) {
        return focal * tan(2.0 * atan(r / focal * 0.5));
    } else if(a == 3) {
        return focal * tan(asin(r / focal));
    }

    return 0.0;
}